import streamlit as st
import sqlite3
import pandas as pd
import requests
import logging
import plotly.express as px
import joblib
import folium
from folium.plugins import HeatMap
from streamlit_folium import folium_static
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
from pulp import LpMaximize, LpProblem, LpVariable, lpSum
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import shap
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
class DatabaseManager:
    def __init__(self, db_name):
        self.db_name = db_name
        self.conn = sqlite3.connect(self.db_name)
        self.cursor = self.conn.cursor()
        self._initialize_db()

    def _initialize_db(self):
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS soil_data (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                –ö—É–ª—å—Ç—É—Ä–∞ TEXT,
                –£—Ä–æ–≤–µ–Ω—å_pH REAL,
                –ê–∑–æ—Ç REAL,
                –§–æ—Å—Ñ–æ—Ä REAL,
                –ö–∞–ª–∏–π REAL,
                –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å REAL,
                –®–∏—Ä–æ—Ç–∞ REAL,
                –î–æ–ª–≥–æ—Ç–∞ REAL,
                –î–∞—Ç–∞ TEXT
            )
        ''')
        self.conn.commit()

    def insert_data(self, –ö—É–ª—å—Ç—É—Ä–∞, –£—Ä–æ–≤–µ–Ω—å_pH, –ê–∑–æ—Ç, –§–æ—Å—Ñ–æ—Ä, –ö–∞–ª–∏–π, –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å, –®–∏—Ä–æ—Ç–∞, –î–æ–ª–≥–æ—Ç–∞, –î–∞—Ç–∞):
        self.cursor.execute('''
            INSERT INTO soil_data 
            (–ö—É–ª—å—Ç—É—Ä–∞, –£—Ä–æ–≤–µ–Ω—å_pH, –ê–∑–æ—Ç, –§–æ—Å—Ñ–æ—Ä, –ö–∞–ª–∏–π, –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å, –®–∏—Ä–æ—Ç–∞, –î–æ–ª–≥–æ—Ç–∞, –î–∞—Ç–∞)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (–ö—É–ª—å—Ç—É—Ä–∞, –£—Ä–æ–≤–µ–Ω—å_pH, –ê–∑–æ—Ç, –§–æ—Å—Ñ–æ—Ä, –ö–∞–ª–∏–π, –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å, –®–∏—Ä–æ—Ç–∞, –î–æ–ª–≥–æ—Ç–∞, –î–∞—Ç–∞))
        self.conn.commit()

    def fetch_data(self):
        return pd.read_sql("SELECT * FROM soil_data", self.conn)

    def close(self):
        self.conn.close()

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –ø–æ–≥–æ–¥—ã
class WeatherAPI:
    def __init__(self, api_key):
        self.api_key = api_key
        self.base_url = "https://weatherapi-com.p.rapidapi.com/current.json"

    @st.cache_data(ttl=3600)
    def get_weather(_self, city):
        headers = {
            "X-RapidAPI-Key": _self.api_key,
            "X-RapidAPI-Host": "weatherapi-com.p.rapidapi.com"
        }
        try:
            response = requests.get(f"{_self.base_url}?q={city}", headers=headers)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã: {e}")
            return None

# –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
class YieldPredictor:
    def __init__(self, db_manager):
        self.db_manager = db_manager
        self.models = {
            "–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å": RandomForestRegressor(n_estimators=100, random_state=42),
            "–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –±—É—Å—Ç–∏–Ω–≥": GradientBoostingRegressor(n_estimators=100, random_state=42)
        }
        self.scaler = StandardScaler()
        self.explainer = None

    def train_model(self):
        df = self.db_manager.fetch_data()
        if len(df) < 10:
            logging.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.")
            return None

        X = df[['–£—Ä–æ–≤–µ–Ω—å_pH', '–ê–∑–æ—Ç', '–§–æ—Å—Ñ–æ—Ä', '–ö–∞–ª–∏–π']]
        y = df['–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å']

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        X_train_scaled = self.scaler.fit_transform(X_train)
        X_test_scaled = self.scaler.transform(X_test)

        trained_models = {}
        for name, model in self.models.items():
            model.fit(X_train_scaled, y_train)
            y_pred = model.predict(X_test_scaled)
            mse = mean_squared_error(y_test, y_pred)
            trained_models[name] = (model, mse)

        joblib.dump(trained_models, "models.pkl")
        joblib.dump(self.scaler, "scaler.pkl")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SHAP explainer
        self.explainer = shap.Explainer(trained_models["–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å"][0], X_train_scaled)

        return trained_models

    def predict_yield(self, –£—Ä–æ–≤–µ–Ω—å_pH, –ê–∑–æ—Ç, –§–æ—Å—Ñ–æ—Ä, –ö–∞–ª–∏–π):
        try:
            trained_models = joblib.load("models.pkl")
            self.scaler = joblib.load("scaler.pkl")

            X_new = self.scaler.transform([[–£—Ä–æ–≤–µ–Ω—å_pH, –ê–∑–æ—Ç, –§–æ—Å—Ñ–æ—Ä, –ö–∞–ª–∏–π]])
            predictions = {}
            for name, (model, _) in trained_models.items():
                predictions[name] = model.predict(X_new)[0]

            return predictions
        except FileNotFoundError:
            logging.warning("–ú–æ–¥–µ–ª–∏ –Ω–µ –æ–±—É—á–µ–Ω—ã.")
            return None

    def explain_prediction(self, –£—Ä–æ–≤–µ–Ω—å_pH, –ê–∑–æ—Ç, –§–æ—Å—Ñ–æ—Ä, –ö–∞–ª–∏–π):
        if self.explainer is None:
            return None

        X_new = self.scaler.transform([[–£—Ä–æ–≤–µ–Ω—å_pH, –ê–∑–æ—Ç, –§–æ—Å—Ñ–æ—Ä, –ö–∞–ª–∏–π]])
        shap_values = self.explainer(X_new)
        return shap_values

# –ö–ª–∞—Å—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
class ResourceOptimizer:
    def __init__(self, db_manager):
        self.db_manager = db_manager

    def optimize_resources(self, –±—é–¥–∂–µ—Ç, –∫—É–ª—å—Ç—É—Ä–∞):
        df = self.db_manager.fetch_data()
        df = df[df['–ö—É–ª—å—Ç—É—Ä–∞'] == –∫—É–ª—å—Ç—É—Ä–∞]

        if df.empty:
            return None

        prob = LpProblem("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è_—Ä–µ—Å—É—Ä—Å–æ–≤", LpMaximize)
        –ê–∑–æ—Ç = LpVariable("–ê–∑–æ—Ç", lowBound=0)
        –§–æ—Å—Ñ–æ—Ä = LpVariable("–§–æ—Å—Ñ–æ—Ä", lowBound=0)
        –ö–∞–ª–∏–π = LpVariable("–ö–∞–ª–∏–π", lowBound=0)

        # –¶–µ–Ω—ã –Ω–∞ —É–¥–æ–±—Ä–µ–Ω–∏—è –≤ —Ç–µ–Ω–≥–µ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        –¶–ï–ù–´ = {
            "–ê–∑–æ—Ç": 150,  # —Ç–µ–Ω–≥–µ –∑–∞ –∫–≥
            "–§–æ—Å—Ñ–æ—Ä": 200,
            "–ö–∞–ª–∏–π": 180
        }

        # –¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        prob += lpSum([
            –ê–∑–æ—Ç * df['–ê–∑–æ—Ç'].mean(),
            –§–æ—Å—Ñ–æ—Ä * df['–§–æ—Å—Ñ–æ—Ä'].mean(),
            –ö–∞–ª–∏–π * df['–ö–∞–ª–∏–π'].mean()
        ])

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –±—é–¥–∂–µ—Ç—É
        prob += lpSum([
            –ê–∑–æ—Ç * –¶–ï–ù–´["–ê–∑–æ—Ç"],
            –§–æ—Å—Ñ–æ—Ä * –¶–ï–ù–´["–§–æ—Å—Ñ–æ—Ä"],
            –ö–∞–ª–∏–π * –¶–ï–ù–´["–ö–∞–ª–∏–π"]
        ]) <= –±—é–¥–∂–µ—Ç

        prob.solve()

        return {
            "–ê–∑–æ—Ç (–∫–≥)": round(–ê–∑–æ—Ç.varValue, 2),
            "–§–æ—Å—Ñ–æ—Ä (–∫–≥)": round(–§–æ—Å—Ñ–æ—Ä.varValue, 2),
            "–ö–∞–ª–∏–π (–∫–≥)": round(–ö–∞–ª–∏–π.varValue, 2)
        }

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class AgricultureApp:
    def __init__(self):
        self.db_manager = DatabaseManager("agriculture.db")
        self.weather_api = WeatherAPI("f07561ab93mshb26859914e2780bp19d0e8jsn18df37d76fd5")
        self.yield_predictor = YieldPredictor(self.db_manager)
        self.resource_optimizer = ResourceOptimizer(self.db_manager)
        self._setup_streamlit()

    def _setup_streamlit(self):
        st.set_page_config(page_title="–ê–≥—Ä–æ–∞–Ω–∞–ª–∏—Ç–∏–∫–∞", layout="wide")
        st.title("üìä –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏")

        self.menu = [
            "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö", "–ê–Ω–∞–ª–∏–∑", "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", 
            "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤", "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
        ]
        self.choice = st.sidebar.selectbox("–ú–µ–Ω—é", self.menu)

        if self.choice == "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö":
            self._input_data()
        elif self.choice == "–ê–Ω–∞–ª–∏–∑":
            self._analyze_data()
        elif self.choice == "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ":
            self._predict_yield()
        elif self.choice == "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤":
            self._optimize_resources()
        elif self.choice == "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö":
            self._export_data()
        elif self.choice == "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏":
            self._show_recommendations()

    def _input_data(self):
        st.subheader("üå± –í–≤–æ–¥ –∞–≥—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
        with st.form("data_form"):
            col1, col2 = st.columns(2)
            with col1:
                –ö—É–ª—å—Ç—É—Ä–∞ = st.selectbox("–ö—É–ª—å—Ç—É—Ä–∞", ["–ü—à–µ–Ω–∏—Ü–∞", "–ö—É–∫—É—Ä—É–∑–∞", "–ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫", "–†–∏—Å", "–Ø—á–º–µ–Ω—å"])
                –£—Ä–æ–≤–µ–Ω—å_pH = st.slider("–£—Ä–æ–≤–µ–Ω—å pH", 4.0, 9.0, 6.5)
                –ê–∑–æ—Ç = st.number_input("–ê–∑–æ—Ç (–∫–≥/–≥–∞)", 0.0, 1000.0)
                –§–æ—Å—Ñ–æ—Ä = st.number_input("–§–æ—Å—Ñ–æ—Ä (–∫–≥/–≥–∞)", 0.0, 1000.0)
            with col2:
                –ö–∞–ª–∏–π = st.number_input("–ö–∞–ª–∏–π (–∫–≥/–≥–∞)", 0.0, 1000.0)
                –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å = st.number_input("–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å (—Ü/–≥–∞)", 0.0, 1000.0)
                –®–∏—Ä–æ—Ç–∞ = st.number_input("–®–∏—Ä–æ—Ç–∞", -90.0, 90.0, 43.2567)
                –î–æ–ª–≥–æ—Ç–∞ = st.number_input("–î–æ–ª–≥–æ—Ç–∞", -180.0, 180.0, 76.9286)
                –î–∞—Ç–∞ = st.date_input("–î–∞—Ç–∞", datetime.now())

            if st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
                if –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å < 0 or –£—Ä–æ–≤–µ–Ω—å_pH < 0 or –ê–∑–æ—Ç < 0 or –§–æ—Å—Ñ–æ—Ä < 0 or –ö–∞–ª–∏–π < 0:
                    st.error("–û—à–∏–±–∫–∞: –í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ó–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏.")
                else:
                    self.db_manager.insert_data(–ö—É–ª—å—Ç—É—Ä–∞, –£—Ä–æ–≤–µ–Ω—å_pH, –ê–∑–æ—Ç, –§–æ—Å—Ñ–æ—Ä, –ö–∞–ª–∏–π, –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å, –®–∏—Ä–æ—Ç–∞, –î–æ–ª–≥–æ—Ç–∞, –î–∞—Ç–∞.strftime('%Y-%m-%d'))
                    st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

    def _analyze_data(self):
        st.subheader("üìà –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å")
        df = self.db_manager.fetch_data()

        if not df.empty:
            # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞
            st.subheader("üåç –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏")
            m = folium.Map(location=[df['–®–∏—Ä–æ—Ç–∞'].mean(), df['–î–æ–ª–≥–æ—Ç–∞'].mean()], zoom_start=5)
            heat_data = [[row['–®–∏—Ä–æ—Ç–∞'], row['–î–æ–ª–≥–æ—Ç–∞'], row['–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å']] for _, row in df.iterrows()]
            HeatMap(heat_data, radius=15).add_to(m)
            folium_static(m)

            # –ì—Ä–∞—Ñ–∏–∫–∏
            fig = px.scatter_matrix(
                df,
                dimensions=['–£—Ä–æ–≤–µ–Ω—å_pH', '–ê–∑–æ—Ç', '–§–æ—Å—Ñ–æ—Ä', '–ö–∞–ª–∏–π', '–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å'],
                color='–ö—É–ª—å—Ç—É—Ä–∞',
                title="–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
            )
            st.plotly_chart(fig)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—É–ª—å—Ç—É—Ä–∞–º")
            st.dataframe(df.groupby('–ö—É–ª—å—Ç—É—Ä–∞').agg({
                '–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å': ['mean', 'max', 'min'],
                '–ê–∑–æ—Ç': 'mean'
            }).style.format("{:.2f}"))

        else:
            st.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

    def _predict_yield(self):
        st.subheader("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏")
        trained_models = self.yield_predictor.train_model()

        if trained_models:
            with st.form("predict_form"):
                col1, col2 = st.columns(2)
                with col1:
                    –£—Ä–æ–≤–µ–Ω—å_pH = st.slider("–£—Ä–æ–≤–µ–Ω—å pH", 4.0, 9.0, 6.5)
                    –ê–∑–æ—Ç = st.number_input("–ê–∑–æ—Ç (–∫–≥/–≥–∞)", 0.0, 1000.0)
                with col2:
                    –§–æ—Å—Ñ–æ—Ä = st.number_input("–§–æ—Å—Ñ–æ—Ä (–∫–≥/–≥–∞)", 0.0, 1000.0)
                    –ö–∞–ª–∏–π = st.number_input("–ö–∞–ª–∏–π (–∫–≥/–≥–∞)", 0.0, 1000.0)

                if st.form_submit_button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
                    predictions = self.yield_predictor.predict_yield(–£—Ä–æ–≤–µ–Ω—å_pH, –ê–∑–æ—Ç, –§–æ—Å—Ñ–æ—Ä, –ö–∞–ª–∏–π)
                    if predictions:
                        for model, value in predictions.items():
                            st.success(f"**{model}**: {value:.2f} —Ü/–≥–∞")

                        # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                        shap_values = self.yield_predictor.explain_prediction(–£—Ä–æ–≤–µ–Ω—å_pH, –ê–∑–æ—Ç, –§–æ—Å—Ñ–æ—Ä, –ö–∞–ª–∏–π)
                        if shap_values:
                            st.subheader("–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é SHAP")
                            fig, ax = plt.subplots()
                            shap.plots.waterfall(shap_values[0], show=False)
                            st.pyplot(fig)
                    else:
                        st.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
        else:
            st.warning("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 10 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π")

    def _optimize_resources(self):
        st.subheader("‚öñÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤")
        with st.form("optim_form"):
            –∫—É–ª—å—Ç—É—Ä–∞ = st.selectbox("–ö—É–ª—å—Ç—É—Ä–∞", ["–ü—à–µ–Ω–∏—Ü–∞", "–ö—É–∫—É—Ä—É–∑–∞", "–ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫", "–†–∏—Å", "–Ø—á–º–µ–Ω—å"])
            –±—é–¥–∂–µ—Ç = st.number_input("–ë—é–¥–∂–µ—Ç (—Ç–µ–Ω–≥–µ)", 0, 1000000, 100000)

            if st.form_submit_button("–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å"):
                result = self.resource_optimizer.optimize_resources(–±—é–¥–∂–µ—Ç, –∫—É–ª—å—Ç—É—Ä–∞)
                if result:
                    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
                    df = pd.DataFrame.from_dict(result, orient='index', columns=['–ó–Ω–∞—á–µ–Ω–∏–µ'])
                    st.dataframe(df.style.format("{:.2f}"))
                else:
                    st.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—É–ª—å—Ç—É—Ä—ã")

    def _export_data(self):
        st.subheader("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
        df = self.db_manager.fetch_data()
        if not df.empty:
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å CSV",
                data=df.to_csv(index=False).encode('utf-8'),
                file_name="–∞–≥—Ä–æ_–¥–∞–Ω–Ω—ã–µ.csv",
                mime="text/csv"
            )
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")

    def _show_recommendations(self):
        st.subheader("üìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        df = self.db_manager.fetch_data()
        if not df.empty:
            avg_yield = df['–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å'].mean()
            st.markdown(f"""
            ### –°—Ä–µ–¥–Ω—è—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å: **{avg_yield:.2f} —Ü/–≥–∞**
            #### –°–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:
            - –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å pH: 6.0-7.0
            - –ë–∞–ª–∞–Ω—Å NPK: 4:2:1
            - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–¥–µ—Ä–∞—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ—á–≤—ã
            - –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è
            """)
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

    def run(self):
        self.db_manager.close()

if __name__ == "__main__":
    app = AgricultureApp()
    app.run()
